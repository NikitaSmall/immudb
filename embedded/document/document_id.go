package document

import (
	"crypto/rand"
	"encoding/binary"
	"encoding/hex"
	"errors"
	"fmt"
	"io"
	"time"
)

/*
	DocumentID is a 16-byte identifier that is automatically generated
	by the server upon document insertion. The 16-byte DocumentID is composed of:

		1) A 4-byte timestamp value, representing the time the document was created,
		measured in seconds since the Unix epoch.
		2) A 4-byte random value, generated using a secure random number generator.
		3) A 8-byte value, initialized to the previous transaction id.

	The timestamp portion of the DocumentID allows documents to be sorted by creation time, which
	can be useful for certain types of queries. The random value and tx id portions of the DocumentID
	ensure that the identifier is unique across all documents in a collection, even if multiple documents
	are inserted in the same second.

	The 5-byte random value provides a total of 32 bits of randomness, which gives a total of 2^32
	possible unique values. This makes it highly unlikely that two DocumentIDs will ever collide.
*/

// DocumentID is a 16-byte identifier that is automatically generated by the server upon document insertion.
type DocumentID [16]byte

// NilDocumentID is the zero value for DocumentID.
var NilDocumentID DocumentID

// NewDocumentIDFromTx generates a new DocumentID.
func NewDocumentIDFromTx(txID uint64) DocumentID {
	return NewDocumentIDFromTimestamp(time.Now(), txID)
}

// NewDocumentIDFromTimestamp generates a new DocumentID from a timestamp.
func NewDocumentIDFromTimestamp(timestamp time.Time, txID uint64) DocumentID {
	var b [16]byte

	// The first 4 bytes are the timestamp.
	binary.BigEndian.PutUint32(b[0:4], uint32(timestamp.Unix()))

	// generate random
	var random [4]byte
	_, err := io.ReadFull(rand.Reader, random[:])
	if err != nil {
		panic(fmt.Errorf("cannot generate random for DocumentId: %v", err))
	}

	// The next 4 bytes are the random value.
	copy(b[4:8], random[:])
	// The last 8 bytes are the transaction id.
	binary.BigEndian.PutUint64(b[8:16], txID)

	return b
}

// Timestamp returns the timestamp portion of the DocumentID.
func (id DocumentID) Timestamp() time.Time {
	unixSecs := binary.BigEndian.Uint32(id[0:4])
	return time.Unix(int64(unixSecs), 0).UTC()
}

// Hex returns the hex representation of the DocumentID.
func (id DocumentID) Hex() string {
	var buf [32]byte
	hex.Encode(buf[:], id[:])
	return string(buf[:])
}

// DocumentIDFromHex returns a DocumentID from a hex string.
func DocumentIDFromHex(s string) (DocumentID, error) {
	if len(s) != 32 {
		return NilDocumentID, errors.New("invalid hex length for DocumentID")
	}

	var oid [16]byte
	_, err := hex.Decode(oid[:], []byte(s))
	if err != nil {
		return NilDocumentID, err
	}

	return oid, nil
}
