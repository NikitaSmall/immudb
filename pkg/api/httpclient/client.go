// Package httpclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package httpclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for ModelComparisonOperator.
const (
	EQ   ModelComparisonOperator = "EQ"
	GE   ModelComparisonOperator = "GE"
	GT   ModelComparisonOperator = "GT"
	LE   ModelComparisonOperator = "LE"
	LIKE ModelComparisonOperator = "LIKE"
	LT   ModelComparisonOperator = "LT"
	NE   ModelComparisonOperator = "NE"
)

// Defines values for ModelFieldType.
const (
	BOOLEAN ModelFieldType = "BOOLEAN"
	DOUBLE  ModelFieldType = "DOUBLE"
	INTEGER ModelFieldType = "INTEGER"
	STRING  ModelFieldType = "STRING"
)

// ImmudbmodelOpenSessionRequest defines model for immudbmodelOpenSessionRequest.
type ImmudbmodelOpenSessionRequest struct {
	Database *string `json:"database,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// ImmudbmodelOpenSessionResponse defines model for immudbmodelOpenSessionResponse.
type ImmudbmodelOpenSessionResponse struct {
	ExpirationTimestamp *int32  `json:"expirationTimestamp,omitempty"`
	InactivityTimestamp *int32  `json:"inactivityTimestamp,omitempty"`
	ServerUUID          *string `json:"serverUUID,omitempty"`
	SessionID           *string `json:"sessionID,omitempty"`
}

// ModelCloseSessionRequest defines model for modelCloseSessionRequest.
type ModelCloseSessionRequest = map[string]interface{}

// ModelCloseSessionResponse defines model for modelCloseSessionResponse.
type ModelCloseSessionResponse = map[string]interface{}

// ModelCollection defines model for modelCollection.
type ModelCollection struct {
	Fields      *[]ModelField `json:"fields,omitempty"`
	IdFieldName *string       `json:"idFieldName,omitempty"`
	Indexes     *[]ModelIndex `json:"indexes,omitempty"`
	Name        *string       `json:"name,omitempty"`
}

// ModelCollectionCreateRequest defines model for modelCollectionCreateRequest.
type ModelCollectionCreateRequest struct {
	Fields      *[]ModelField `json:"fields,omitempty"`
	IdFieldName *string       `json:"idFieldName,omitempty"`
	Indexes     *[]ModelIndex `json:"indexes,omitempty"`
	Name        *string       `json:"name,omitempty"`
}

// ModelCollectionCreateResponse defines model for modelCollectionCreateResponse.
type ModelCollectionCreateResponse = map[string]interface{}

// ModelCollectionDeleteResponse defines model for modelCollectionDeleteResponse.
type ModelCollectionDeleteResponse = map[string]interface{}

// ModelCollectionGetResponse defines model for modelCollectionGetResponse.
type ModelCollectionGetResponse struct {
	Collection *ModelCollection `json:"collection,omitempty"`
}

// ModelCollectionListRequest defines model for modelCollectionListRequest.
type ModelCollectionListRequest = map[string]interface{}

// ModelCollectionListResponse defines model for modelCollectionListResponse.
type ModelCollectionListResponse struct {
	Collections *[]ModelCollection `json:"collections,omitempty"`
}

// ModelCollectionUpdateRequest defines model for modelCollectionUpdateRequest.
type ModelCollectionUpdateRequest struct {
	IdFieldName *string `json:"idFieldName,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// ModelCollectionUpdateResponse defines model for modelCollectionUpdateResponse.
type ModelCollectionUpdateResponse = map[string]interface{}

// ModelComparisonOperator defines model for modelComparisonOperator.
type ModelComparisonOperator string

// ModelDocumentAtRevision defines model for modelDocumentAtRevision.
type ModelDocumentAtRevision struct {
	Document      *map[string]interface{} `json:"document,omitempty"`
	Revision      *string                 `json:"revision,omitempty"`
	TransactionId *string                 `json:"transactionId,omitempty"`
}

// ModelDocumentAuditRequest defines model for modelDocumentAuditRequest.
type ModelDocumentAuditRequest struct {
	Collection *string `json:"collection,omitempty"`
	Desc       *bool   `json:"desc,omitempty"`
	DocumentId *string `json:"documentId,omitempty"`
	Page       *int64  `json:"page,omitempty"`
	PerPage    *int64  `json:"perPage,omitempty"`
}

// ModelDocumentAuditResponse defines model for modelDocumentAuditResponse.
type ModelDocumentAuditResponse struct {
	Revisions *[]ModelDocumentAtRevision `json:"revisions,omitempty"`
}

// ModelDocumentInsertManyRequest defines model for modelDocumentInsertManyRequest.
type ModelDocumentInsertManyRequest struct {
	Collection *string                   `json:"collection,omitempty"`
	Documents  *[]map[string]interface{} `json:"documents,omitempty"`
}

// ModelDocumentInsertManyResponse defines model for modelDocumentInsertManyResponse.
type ModelDocumentInsertManyResponse struct {
	DocumentIds   *[]string `json:"documentIds,omitempty"`
	TransactionId *string   `json:"transactionId,omitempty"`
}

// ModelDocumentInsertRequest defines model for modelDocumentInsertRequest.
type ModelDocumentInsertRequest struct {
	Collection *string                 `json:"collection,omitempty"`
	Document   *map[string]interface{} `json:"document,omitempty"`
}

// ModelDocumentInsertResponse defines model for modelDocumentInsertResponse.
type ModelDocumentInsertResponse struct {
	DocumentId    *string `json:"documentId,omitempty"`
	TransactionId *string `json:"transactionId,omitempty"`
}

// ModelDocumentProofRequest defines model for modelDocumentProofRequest.
type ModelDocumentProofRequest struct {
	Collection              *string `json:"collection,omitempty"`
	DocumentId              *string `json:"documentId,omitempty"`
	ProofSinceTransactionId *string `json:"proofSinceTransactionId,omitempty"`
	TransactionId           *string `json:"transactionId,omitempty"`
}

// ModelDocumentProofResponse defines model for modelDocumentProofResponse.
type ModelDocumentProofResponse struct {
	CollectionId    *int64                `json:"collectionId,omitempty"`
	Database        *string               `json:"database,omitempty"`
	EncodedDocument *[]byte               `json:"encodedDocument,omitempty"`
	IdFieldName     *string               `json:"idFieldName,omitempty"`
	VerifiableTx    *SchemaVerifiableTxV2 `json:"verifiableTx,omitempty"`
}

// ModelDocumentSearchRequest defines model for modelDocumentSearchRequest.
type ModelDocumentSearchRequest struct {
	Collection *string     `json:"collection,omitempty"`
	Desc       *bool       `json:"desc,omitempty"`
	Page       *int64      `json:"page,omitempty"`
	PerPage    *int64      `json:"perPage,omitempty"`
	Query      *ModelQuery `json:"query,omitempty"`
	SearchID   *string     `json:"searchID,omitempty"`
}

// ModelDocumentSearchResponse defines model for modelDocumentSearchResponse.
type ModelDocumentSearchResponse struct {
	Revisions *[]ModelDocumentAtRevision `json:"revisions,omitempty"`
	SearchID  *string                    `json:"searchID,omitempty"`
}

// ModelDocumentUpdateRequest defines model for modelDocumentUpdateRequest.
type ModelDocumentUpdateRequest struct {
	Collection *string                 `json:"collection,omitempty"`
	Document   *map[string]interface{} `json:"document,omitempty"`
	Query      *ModelQuery             `json:"query,omitempty"`
}

// ModelDocumentUpdateResponse defines model for modelDocumentUpdateResponse.
type ModelDocumentUpdateResponse struct {
	DocumentId    *string `json:"documentId,omitempty"`
	Revision      *string `json:"revision,omitempty"`
	TransactionId *string `json:"transactionId,omitempty"`
}

// ModelField defines model for modelField.
type ModelField struct {
	Name *string         `json:"name,omitempty"`
	Type *ModelFieldType `json:"type,omitempty"`
}

// ModelFieldComparison defines model for modelFieldComparison.
type ModelFieldComparison struct {
	Field    *string                  `json:"field,omitempty"`
	Operator *ModelComparisonOperator `json:"operator,omitempty"`
	Value    interface{}  `json:"value,omitempty"`
}

// ModelFieldType defines model for modelFieldType.
type ModelFieldType string

// ModelIndex defines model for modelIndex.
type ModelIndex struct {
	Fields   *[]string `json:"fields,omitempty"`
	IsUnique *bool     `json:"isUnique,omitempty"`
}

// ModelIndexCreateRequest defines model for modelIndexCreateRequest.
type ModelIndexCreateRequest struct {
	Collection *string   `json:"collection,omitempty"`
	Fields     *[]string `json:"fields,omitempty"`
	IsUnique   *bool     `json:"isUnique,omitempty"`
}

// ModelIndexCreateResponse defines model for modelIndexCreateResponse.
type ModelIndexCreateResponse = map[string]interface{}

// ModelIndexDeleteRequest defines model for modelIndexDeleteRequest.
type ModelIndexDeleteRequest struct {
	Collection *string   `json:"collection,omitempty"`
	Fields     *[]string `json:"fields,omitempty"`
}

// ModelIndexDeleteResponse defines model for modelIndexDeleteResponse.
type ModelIndexDeleteResponse = map[string]interface{}

// ModelKeepAliveRequest defines model for modelKeepAliveRequest.
type ModelKeepAliveRequest = map[string]interface{}

// ModelKeepAliveResponse defines model for modelKeepAliveResponse.
type ModelKeepAliveResponse = map[string]interface{}

// ModelQuery defines model for modelQuery.
type ModelQuery struct {
	Expressions *[]ModelQueryExpression `json:"expressions,omitempty"`
}

// ModelQueryExpression defines model for modelQueryExpression.
type ModelQueryExpression struct {
	FieldComparisons *[]ModelFieldComparison `json:"fieldComparisons,omitempty"`
}

// ProtobufAny `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//	Foo foo = ...;
//	Any any;
//	any.PackFrom(foo);
//	...
//	if (any.UnpackTo(&foo)) {
//	  ...
//	}
//
// Example 2: Pack and unpack a message in Java.
//
//	Foo foo = ...;
//	Any any = Any.pack(foo);
//	...
//	if (any.is(Foo.class)) {
//	  foo = any.unpack(Foo.class);
//	}
//
// Example 3: Pack and unpack a message in Python.
//
//	foo = Foo(...)
//	any = Any()
//	any.Pack(foo)
//	...
//	if any.Is(Foo.DESCRIPTOR):
//	  any.Unpack(foo)
//	  ...
//
// Example 4: Pack and unpack a message in Go
//
//	foo := &pb.Foo{...}
//	any, err := anypb.New(foo)
//	if err != nil {
//	  ...
//	}
//	...
//	foo := &pb.Foo{}
//	if err := any.UnmarshalTo(foo); err != nil {
//	  ...
//	}
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
// # JSON
//
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//	package google.profile;
//	message Person {
//	  string first_name = 1;
//	  string last_name = 2;
//	}
//
//	{
//	  "@type": "type.googleapis.com/google.profile.Person",
//	  "firstName": <string>,
//	  "lastName": <string>
//	}
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//	{
//	  "@type": "type.googleapis.com/google.protobuf.Duration",
//	  "value": "1.212s"
//	}
type ProtobufAny struct {
	// TypeUrl A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeUrl *string `json:"type_url,omitempty"`

	// Value Must be a valid serialized protocol buffer of the above specified type.
	Value *[]byte `json:"value,omitempty"`
}

// RuntimeError defines model for runtimeError.
type RuntimeError struct {
	Code    *int32         `json:"code,omitempty"`
	Details *[]ProtobufAny `json:"details,omitempty"`
	Error   *string        `json:"error,omitempty"`
	Message *string        `json:"message,omitempty"`
}

// SchemaDualProofV2 defines model for schemaDualProofV2.
type SchemaDualProofV2 struct {
	ConsistencyProof *[][]byte       `json:"consistencyProof,omitempty"`
	InclusionProof   *[][]byte       `json:"inclusionProof,omitempty"`
	SourceTxHeader   *SchemaTxHeader `json:"sourceTxHeader,omitempty"`
	TargetTxHeader   *SchemaTxHeader `json:"targetTxHeader,omitempty"`
}

// SchemaEntry defines model for schemaEntry.
type SchemaEntry struct {
	Expired      *bool             `json:"expired,omitempty"`
	Key          *[]byte           `json:"key,omitempty"`
	Metadata     *SchemaKVMetadata `json:"metadata,omitempty"`
	ReferencedBy *SchemaReference  `json:"referencedBy,omitempty"`
	Revision     *string           `json:"revision,omitempty"`
	Tx           *string           `json:"tx,omitempty"`
	Value        *[]byte           `json:"value,omitempty"`
}

// SchemaExpiration defines model for schemaExpiration.
type SchemaExpiration struct {
	ExpiresAt *string `json:"expiresAt,omitempty"`
}

// SchemaKVMetadata defines model for schemaKVMetadata.
type SchemaKVMetadata struct {
	Deleted      *bool             `json:"deleted,omitempty"`
	Expiration   *SchemaExpiration `json:"expiration,omitempty"`
	NonIndexable *bool             `json:"nonIndexable,omitempty"`
}

// SchemaReference defines model for schemaReference.
type SchemaReference struct {
	AtTx     *string           `json:"atTx,omitempty"`
	Key      *[]byte           `json:"key,omitempty"`
	Metadata *SchemaKVMetadata `json:"metadata,omitempty"`
	Revision *string           `json:"revision,omitempty"`
	Tx       *string           `json:"tx,omitempty"`
}

// SchemaSignature defines model for schemaSignature.
type SchemaSignature struct {
	PublicKey *[]byte `json:"publicKey,omitempty"`
	Signature *[]byte `json:"signature,omitempty"`
}

// SchemaTx defines model for schemaTx.
type SchemaTx struct {
	Entries   *[]SchemaTxEntry `json:"entries,omitempty"`
	Header    *SchemaTxHeader  `json:"header,omitempty"`
	KvEntries *[]SchemaEntry   `json:"kvEntries,omitempty"`
	ZEntries  *[]SchemaZEntry  `json:"zEntries,omitempty"`
}

// SchemaTxEntry defines model for schemaTxEntry.
type SchemaTxEntry struct {
	HValue   *[]byte           `json:"hValue,omitempty"`
	Key      *[]byte           `json:"key,omitempty"`
	Metadata *SchemaKVMetadata `json:"metadata,omitempty"`
	VLen     *int32            `json:"vLen,omitempty"`

	// Value value, must be ignored when len(value) == 0 and vLen > 0.
	// Otherwise sha256(value) must be equal to hValue.
	Value *[]byte `json:"value,omitempty"`
}

// SchemaTxHeader defines model for schemaTxHeader.
type SchemaTxHeader struct {
	BlRoot   *[]byte           `json:"blRoot,omitempty"`
	BlTxId   *string           `json:"blTxId,omitempty"`
	EH       *[]byte           `json:"eH,omitempty"`
	Id       *string           `json:"id,omitempty"`
	Metadata *SchemaTxMetadata `json:"metadata,omitempty"`
	Nentries *int32            `json:"nentries,omitempty"`
	PrevAlh  *[]byte           `json:"prevAlh,omitempty"`
	Ts       *string           `json:"ts,omitempty"`
	Version  *int32            `json:"version,omitempty"`
}

// SchemaTxMetadata defines model for schemaTxMetadata.
type SchemaTxMetadata struct {
	TruncatedTxID *string `json:"truncatedTxID,omitempty"`
}

// SchemaVerifiableTxV2 defines model for schemaVerifiableTxV2.
type SchemaVerifiableTxV2 struct {
	DualProof *SchemaDualProofV2 `json:"dualProof,omitempty"`
	Signature *SchemaSignature   `json:"signature,omitempty"`
	Tx        *SchemaTx          `json:"tx,omitempty"`
}

// SchemaZEntry defines model for schemaZEntry.
type SchemaZEntry struct {
	AtTx  *string      `json:"atTx,omitempty"`
	Entry *SchemaEntry `json:"entry,omitempty"`
	Key   *[]byte      `json:"key,omitempty"`
	Score *float64     `json:"score,omitempty"`
	Set   *[]byte      `json:"set,omitempty"`
}

// CollectionDeleteParams defines parameters for CollectionDelete.
type CollectionDeleteParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// CollectionGetParams defines parameters for CollectionGet.
type CollectionGetParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// CloseSessionJSONRequestBody defines body for CloseSession for application/json ContentType.
type CloseSessionJSONRequestBody = ModelCloseSessionRequest

// KeepAliveJSONRequestBody defines body for KeepAlive for application/json ContentType.
type KeepAliveJSONRequestBody = ModelKeepAliveRequest

// OpenSessionJSONRequestBody defines body for OpenSession for application/json ContentType.
type OpenSessionJSONRequestBody = ImmudbmodelOpenSessionRequest

// CollectionCreateJSONRequestBody defines body for CollectionCreate for application/json ContentType.
type CollectionCreateJSONRequestBody = ModelCollectionCreateRequest

// CollectionListJSONRequestBody defines body for CollectionList for application/json ContentType.
type CollectionListJSONRequestBody = ModelCollectionListRequest

// CollectionUpdateJSONRequestBody defines body for CollectionUpdate for application/json ContentType.
type CollectionUpdateJSONRequestBody = ModelCollectionUpdateRequest

// DocumentAuditJSONRequestBody defines body for DocumentAudit for application/json ContentType.
type DocumentAuditJSONRequestBody = ModelDocumentAuditRequest

// DocumentInsertJSONRequestBody defines body for DocumentInsert for application/json ContentType.
type DocumentInsertJSONRequestBody = ModelDocumentInsertRequest

// DocumentInsertManyJSONRequestBody defines body for DocumentInsertMany for application/json ContentType.
type DocumentInsertManyJSONRequestBody = ModelDocumentInsertManyRequest

// DocumentProofJSONRequestBody defines body for DocumentProof for application/json ContentType.
type DocumentProofJSONRequestBody = ModelDocumentProofRequest

// DocumentSearchJSONRequestBody defines body for DocumentSearch for application/json ContentType.
type DocumentSearchJSONRequestBody = ModelDocumentSearchRequest

// DocumentUpdateJSONRequestBody defines body for DocumentUpdate for application/json ContentType.
type DocumentUpdateJSONRequestBody = ModelDocumentUpdateRequest

// IndexCreateJSONRequestBody defines body for IndexCreate for application/json ContentType.
type IndexCreateJSONRequestBody = ModelIndexCreateRequest

// IndexDeleteJSONRequestBody defines body for IndexDelete for application/json ContentType.
type IndexDeleteJSONRequestBody = ModelIndexDeleteRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CloseSession request with any body
	CloseSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CloseSession(ctx context.Context, body CloseSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KeepAlive request with any body
	KeepAliveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KeepAlive(ctx context.Context, body KeepAliveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OpenSession request with any body
	OpenSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OpenSession(ctx context.Context, body OpenSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionCreate request with any body
	CollectionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CollectionCreate(ctx context.Context, body CollectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionDelete request
	CollectionDelete(ctx context.Context, params *CollectionDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionGet request
	CollectionGet(ctx context.Context, params *CollectionGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionList request with any body
	CollectionListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CollectionList(ctx context.Context, body CollectionListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionUpdate request with any body
	CollectionUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CollectionUpdate(ctx context.Context, body CollectionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentAudit request with any body
	DocumentAuditWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentAudit(ctx context.Context, body DocumentAuditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentInsert request with any body
	DocumentInsertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentInsert(ctx context.Context, body DocumentInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentInsertMany request with any body
	DocumentInsertManyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentInsertMany(ctx context.Context, body DocumentInsertManyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentProof request with any body
	DocumentProofWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentProof(ctx context.Context, body DocumentProofJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentSearch request with any body
	DocumentSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentSearch(ctx context.Context, body DocumentSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DocumentUpdate request with any body
	DocumentUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DocumentUpdate(ctx context.Context, body DocumentUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IndexCreate request with any body
	IndexCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IndexCreate(ctx context.Context, body IndexCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IndexDelete request with any body
	IndexDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IndexDelete(ctx context.Context, body IndexDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CloseSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloseSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloseSession(ctx context.Context, body CloseSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloseSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeepAliveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeepAliveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeepAlive(ctx context.Context, body KeepAliveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeepAliveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpenSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpenSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpenSession(ctx context.Context, body OpenSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpenSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionCreate(ctx context.Context, body CollectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionDelete(ctx context.Context, params *CollectionDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionGet(ctx context.Context, params *CollectionGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionList(ctx context.Context, body CollectionListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionUpdate(ctx context.Context, body CollectionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentAuditWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentAuditRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentAudit(ctx context.Context, body DocumentAuditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentAuditRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentInsertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentInsertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentInsert(ctx context.Context, body DocumentInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentInsertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentInsertManyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentInsertManyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentInsertMany(ctx context.Context, body DocumentInsertManyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentInsertManyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentProofWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentProofRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentProof(ctx context.Context, body DocumentProofJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentProofRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentSearch(ctx context.Context, body DocumentSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentSearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DocumentUpdate(ctx context.Context, body DocumentUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDocumentUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IndexCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIndexCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IndexCreate(ctx context.Context, body IndexCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIndexCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IndexDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIndexDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IndexDelete(ctx context.Context, body IndexDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIndexDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCloseSessionRequest calls the generic CloseSession builder with application/json body
func NewCloseSessionRequest(server string, body CloseSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCloseSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewCloseSessionRequestWithBody generates requests for CloseSession with any type of body
func NewCloseSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorization/session/close")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewKeepAliveRequest calls the generic KeepAlive builder with application/json body
func NewKeepAliveRequest(server string, body KeepAliveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKeepAliveRequestWithBody(server, "application/json", bodyReader)
}

// NewKeepAliveRequestWithBody generates requests for KeepAlive with any type of body
func NewKeepAliveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorization/session/keepalive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOpenSessionRequest calls the generic OpenSession builder with application/json body
func NewOpenSessionRequest(server string, body OpenSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOpenSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewOpenSessionRequestWithBody generates requests for OpenSession with any type of body
func NewOpenSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorization/session/open")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCollectionCreateRequest calls the generic CollectionCreate builder with application/json body
func NewCollectionCreateRequest(server string, body CollectionCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCollectionCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCollectionCreateRequestWithBody generates requests for CollectionCreate with any type of body
func NewCollectionCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCollectionDeleteRequest generates requests for CollectionDelete
func NewCollectionDeleteRequest(server string, params *CollectionDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCollectionGetRequest generates requests for CollectionGet
func NewCollectionGetRequest(server string, params *CollectionGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCollectionListRequest calls the generic CollectionList builder with application/json body
func NewCollectionListRequest(server string, body CollectionListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCollectionListRequestWithBody(server, "application/json", bodyReader)
}

// NewCollectionListRequestWithBody generates requests for CollectionList with any type of body
func NewCollectionListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCollectionUpdateRequest calls the generic CollectionUpdate builder with application/json body
func NewCollectionUpdateRequest(server string, body CollectionUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCollectionUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewCollectionUpdateRequestWithBody generates requests for CollectionUpdate with any type of body
func NewCollectionUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentAuditRequest calls the generic DocumentAudit builder with application/json body
func NewDocumentAuditRequest(server string, body DocumentAuditJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentAuditRequestWithBody(server, "application/json", bodyReader)
}

// NewDocumentAuditRequestWithBody generates requests for DocumentAudit with any type of body
func NewDocumentAuditRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/audit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentInsertRequest calls the generic DocumentInsert builder with application/json body
func NewDocumentInsertRequest(server string, body DocumentInsertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentInsertRequestWithBody(server, "application/json", bodyReader)
}

// NewDocumentInsertRequestWithBody generates requests for DocumentInsert with any type of body
func NewDocumentInsertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/insert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentInsertManyRequest calls the generic DocumentInsertMany builder with application/json body
func NewDocumentInsertManyRequest(server string, body DocumentInsertManyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentInsertManyRequestWithBody(server, "application/json", bodyReader)
}

// NewDocumentInsertManyRequestWithBody generates requests for DocumentInsertMany with any type of body
func NewDocumentInsertManyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/insertmany")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentProofRequest calls the generic DocumentProof builder with application/json body
func NewDocumentProofRequest(server string, body DocumentProofJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentProofRequestWithBody(server, "application/json", bodyReader)
}

// NewDocumentProofRequestWithBody generates requests for DocumentProof with any type of body
func NewDocumentProofRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/proof")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentSearchRequest calls the generic DocumentSearch builder with application/json body
func NewDocumentSearchRequest(server string, body DocumentSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentSearchRequestWithBody(server, "application/json", bodyReader)
}

// NewDocumentSearchRequestWithBody generates requests for DocumentSearch with any type of body
func NewDocumentSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDocumentUpdateRequest calls the generic DocumentUpdate builder with application/json body
func NewDocumentUpdateRequest(server string, body DocumentUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDocumentUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewDocumentUpdateRequestWithBody generates requests for DocumentUpdate with any type of body
func NewDocumentUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIndexCreateRequest calls the generic IndexCreate builder with application/json body
func NewIndexCreateRequest(server string, body IndexCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIndexCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewIndexCreateRequestWithBody generates requests for IndexCreate with any type of body
func NewIndexCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/indexes/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIndexDeleteRequest calls the generic IndexDelete builder with application/json body
func NewIndexDeleteRequest(server string, body IndexDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIndexDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewIndexDeleteRequestWithBody generates requests for IndexDelete with any type of body
func NewIndexDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/indexes/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CloseSession request with any body
	CloseSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloseSessionResponse, error)

	CloseSessionWithResponse(ctx context.Context, body CloseSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CloseSessionResponse, error)

	// KeepAlive request with any body
	KeepAliveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KeepAliveResponse, error)

	KeepAliveWithResponse(ctx context.Context, body KeepAliveJSONRequestBody, reqEditors ...RequestEditorFn) (*KeepAliveResponse, error)

	// OpenSession request with any body
	OpenSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OpenSessionResponse, error)

	OpenSessionWithResponse(ctx context.Context, body OpenSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*OpenSessionResponse, error)

	// CollectionCreate request with any body
	CollectionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionCreateResponse, error)

	CollectionCreateWithResponse(ctx context.Context, body CollectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionCreateResponse, error)

	// CollectionDelete request
	CollectionDeleteWithResponse(ctx context.Context, params *CollectionDeleteParams, reqEditors ...RequestEditorFn) (*CollectionDeleteResponse, error)

	// CollectionGet request
	CollectionGetWithResponse(ctx context.Context, params *CollectionGetParams, reqEditors ...RequestEditorFn) (*CollectionGetResponse, error)

	// CollectionList request with any body
	CollectionListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionListResponse, error)

	CollectionListWithResponse(ctx context.Context, body CollectionListJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionListResponse, error)

	// CollectionUpdate request with any body
	CollectionUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionUpdateResponse, error)

	CollectionUpdateWithResponse(ctx context.Context, body CollectionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionUpdateResponse, error)

	// DocumentAudit request with any body
	DocumentAuditWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentAuditResponse, error)

	DocumentAuditWithResponse(ctx context.Context, body DocumentAuditJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentAuditResponse, error)

	// DocumentInsert request with any body
	DocumentInsertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentInsertResponse, error)

	DocumentInsertWithResponse(ctx context.Context, body DocumentInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentInsertResponse, error)

	// DocumentInsertMany request with any body
	DocumentInsertManyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentInsertManyResponse, error)

	DocumentInsertManyWithResponse(ctx context.Context, body DocumentInsertManyJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentInsertManyResponse, error)

	// DocumentProof request with any body
	DocumentProofWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentProofResponse, error)

	DocumentProofWithResponse(ctx context.Context, body DocumentProofJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentProofResponse, error)

	// DocumentSearch request with any body
	DocumentSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentSearchResponse, error)

	DocumentSearchWithResponse(ctx context.Context, body DocumentSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentSearchResponse, error)

	// DocumentUpdate request with any body
	DocumentUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentUpdateResponse, error)

	DocumentUpdateWithResponse(ctx context.Context, body DocumentUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentUpdateResponse, error)

	// IndexCreate request with any body
	IndexCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IndexCreateResponse, error)

	IndexCreateWithResponse(ctx context.Context, body IndexCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IndexCreateResponse, error)

	// IndexDelete request with any body
	IndexDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IndexDeleteResponse, error)

	IndexDeleteWithResponse(ctx context.Context, body IndexDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*IndexDeleteResponse, error)
}

type CloseSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelCloseSessionResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r CloseSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloseSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KeepAliveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelKeepAliveResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r KeepAliveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KeepAliveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OpenSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImmudbmodelOpenSessionResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r OpenSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OpenSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelCollectionCreateResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r CollectionCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelCollectionDeleteResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r CollectionDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelCollectionGetResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r CollectionGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelCollectionListResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r CollectionListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelCollectionUpdateResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r CollectionUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentAuditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelDocumentAuditResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r DocumentAuditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentAuditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentInsertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelDocumentInsertResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r DocumentInsertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentInsertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentInsertManyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelDocumentInsertManyResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r DocumentInsertManyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentInsertManyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentProofResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelDocumentProofResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r DocumentProofResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentProofResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelDocumentSearchResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r DocumentSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DocumentUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelDocumentUpdateResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r DocumentUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DocumentUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IndexCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelIndexCreateResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r IndexCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IndexCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IndexDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelIndexDeleteResponse
	JSONDefault  *RuntimeError
}

// Status returns HTTPResponse.Status
func (r IndexDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IndexDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CloseSessionWithBodyWithResponse request with arbitrary body returning *CloseSessionResponse
func (c *ClientWithResponses) CloseSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloseSessionResponse, error) {
	rsp, err := c.CloseSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloseSessionResponse(rsp)
}

func (c *ClientWithResponses) CloseSessionWithResponse(ctx context.Context, body CloseSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CloseSessionResponse, error) {
	rsp, err := c.CloseSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloseSessionResponse(rsp)
}

// KeepAliveWithBodyWithResponse request with arbitrary body returning *KeepAliveResponse
func (c *ClientWithResponses) KeepAliveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KeepAliveResponse, error) {
	rsp, err := c.KeepAliveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeepAliveResponse(rsp)
}

func (c *ClientWithResponses) KeepAliveWithResponse(ctx context.Context, body KeepAliveJSONRequestBody, reqEditors ...RequestEditorFn) (*KeepAliveResponse, error) {
	rsp, err := c.KeepAlive(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeepAliveResponse(rsp)
}

// OpenSessionWithBodyWithResponse request with arbitrary body returning *OpenSessionResponse
func (c *ClientWithResponses) OpenSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OpenSessionResponse, error) {
	rsp, err := c.OpenSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpenSessionResponse(rsp)
}

func (c *ClientWithResponses) OpenSessionWithResponse(ctx context.Context, body OpenSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*OpenSessionResponse, error) {
	rsp, err := c.OpenSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpenSessionResponse(rsp)
}

// CollectionCreateWithBodyWithResponse request with arbitrary body returning *CollectionCreateResponse
func (c *ClientWithResponses) CollectionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionCreateResponse, error) {
	rsp, err := c.CollectionCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionCreateResponse(rsp)
}

func (c *ClientWithResponses) CollectionCreateWithResponse(ctx context.Context, body CollectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionCreateResponse, error) {
	rsp, err := c.CollectionCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionCreateResponse(rsp)
}

// CollectionDeleteWithResponse request returning *CollectionDeleteResponse
func (c *ClientWithResponses) CollectionDeleteWithResponse(ctx context.Context, params *CollectionDeleteParams, reqEditors ...RequestEditorFn) (*CollectionDeleteResponse, error) {
	rsp, err := c.CollectionDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionDeleteResponse(rsp)
}

// CollectionGetWithResponse request returning *CollectionGetResponse
func (c *ClientWithResponses) CollectionGetWithResponse(ctx context.Context, params *CollectionGetParams, reqEditors ...RequestEditorFn) (*CollectionGetResponse, error) {
	rsp, err := c.CollectionGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionGetResponse(rsp)
}

// CollectionListWithBodyWithResponse request with arbitrary body returning *CollectionListResponse
func (c *ClientWithResponses) CollectionListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionListResponse, error) {
	rsp, err := c.CollectionListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionListResponse(rsp)
}

func (c *ClientWithResponses) CollectionListWithResponse(ctx context.Context, body CollectionListJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionListResponse, error) {
	rsp, err := c.CollectionList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionListResponse(rsp)
}

// CollectionUpdateWithBodyWithResponse request with arbitrary body returning *CollectionUpdateResponse
func (c *ClientWithResponses) CollectionUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionUpdateResponse, error) {
	rsp, err := c.CollectionUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionUpdateResponse(rsp)
}

func (c *ClientWithResponses) CollectionUpdateWithResponse(ctx context.Context, body CollectionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionUpdateResponse, error) {
	rsp, err := c.CollectionUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionUpdateResponse(rsp)
}

// DocumentAuditWithBodyWithResponse request with arbitrary body returning *DocumentAuditResponse
func (c *ClientWithResponses) DocumentAuditWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentAuditResponse, error) {
	rsp, err := c.DocumentAuditWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentAuditResponse(rsp)
}

func (c *ClientWithResponses) DocumentAuditWithResponse(ctx context.Context, body DocumentAuditJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentAuditResponse, error) {
	rsp, err := c.DocumentAudit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentAuditResponse(rsp)
}

// DocumentInsertWithBodyWithResponse request with arbitrary body returning *DocumentInsertResponse
func (c *ClientWithResponses) DocumentInsertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentInsertResponse, error) {
	rsp, err := c.DocumentInsertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentInsertResponse(rsp)
}

func (c *ClientWithResponses) DocumentInsertWithResponse(ctx context.Context, body DocumentInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentInsertResponse, error) {
	rsp, err := c.DocumentInsert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentInsertResponse(rsp)
}

// DocumentInsertManyWithBodyWithResponse request with arbitrary body returning *DocumentInsertManyResponse
func (c *ClientWithResponses) DocumentInsertManyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentInsertManyResponse, error) {
	rsp, err := c.DocumentInsertManyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentInsertManyResponse(rsp)
}

func (c *ClientWithResponses) DocumentInsertManyWithResponse(ctx context.Context, body DocumentInsertManyJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentInsertManyResponse, error) {
	rsp, err := c.DocumentInsertMany(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentInsertManyResponse(rsp)
}

// DocumentProofWithBodyWithResponse request with arbitrary body returning *DocumentProofResponse
func (c *ClientWithResponses) DocumentProofWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentProofResponse, error) {
	rsp, err := c.DocumentProofWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentProofResponse(rsp)
}

func (c *ClientWithResponses) DocumentProofWithResponse(ctx context.Context, body DocumentProofJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentProofResponse, error) {
	rsp, err := c.DocumentProof(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentProofResponse(rsp)
}

// DocumentSearchWithBodyWithResponse request with arbitrary body returning *DocumentSearchResponse
func (c *ClientWithResponses) DocumentSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentSearchResponse, error) {
	rsp, err := c.DocumentSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentSearchResponse(rsp)
}

func (c *ClientWithResponses) DocumentSearchWithResponse(ctx context.Context, body DocumentSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentSearchResponse, error) {
	rsp, err := c.DocumentSearch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentSearchResponse(rsp)
}

// DocumentUpdateWithBodyWithResponse request with arbitrary body returning *DocumentUpdateResponse
func (c *ClientWithResponses) DocumentUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DocumentUpdateResponse, error) {
	rsp, err := c.DocumentUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentUpdateResponse(rsp)
}

func (c *ClientWithResponses) DocumentUpdateWithResponse(ctx context.Context, body DocumentUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DocumentUpdateResponse, error) {
	rsp, err := c.DocumentUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDocumentUpdateResponse(rsp)
}

// IndexCreateWithBodyWithResponse request with arbitrary body returning *IndexCreateResponse
func (c *ClientWithResponses) IndexCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IndexCreateResponse, error) {
	rsp, err := c.IndexCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIndexCreateResponse(rsp)
}

func (c *ClientWithResponses) IndexCreateWithResponse(ctx context.Context, body IndexCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IndexCreateResponse, error) {
	rsp, err := c.IndexCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIndexCreateResponse(rsp)
}

// IndexDeleteWithBodyWithResponse request with arbitrary body returning *IndexDeleteResponse
func (c *ClientWithResponses) IndexDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IndexDeleteResponse, error) {
	rsp, err := c.IndexDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIndexDeleteResponse(rsp)
}

func (c *ClientWithResponses) IndexDeleteWithResponse(ctx context.Context, body IndexDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*IndexDeleteResponse, error) {
	rsp, err := c.IndexDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIndexDeleteResponse(rsp)
}

// ParseCloseSessionResponse parses an HTTP response from a CloseSessionWithResponse call
func ParseCloseSessionResponse(rsp *http.Response) (*CloseSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CloseSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelCloseSessionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseKeepAliveResponse parses an HTTP response from a KeepAliveWithResponse call
func ParseKeepAliveResponse(rsp *http.Response) (*KeepAliveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KeepAliveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelKeepAliveResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOpenSessionResponse parses an HTTP response from a OpenSessionWithResponse call
func ParseOpenSessionResponse(rsp *http.Response) (*OpenSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OpenSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImmudbmodelOpenSessionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionCreateResponse parses an HTTP response from a CollectionCreateWithResponse call
func ParseCollectionCreateResponse(rsp *http.Response) (*CollectionCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelCollectionCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionDeleteResponse parses an HTTP response from a CollectionDeleteWithResponse call
func ParseCollectionDeleteResponse(rsp *http.Response) (*CollectionDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelCollectionDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionGetResponse parses an HTTP response from a CollectionGetWithResponse call
func ParseCollectionGetResponse(rsp *http.Response) (*CollectionGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelCollectionGetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionListResponse parses an HTTP response from a CollectionListWithResponse call
func ParseCollectionListResponse(rsp *http.Response) (*CollectionListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelCollectionListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCollectionUpdateResponse parses an HTTP response from a CollectionUpdateWithResponse call
func ParseCollectionUpdateResponse(rsp *http.Response) (*CollectionUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelCollectionUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDocumentAuditResponse parses an HTTP response from a DocumentAuditWithResponse call
func ParseDocumentAuditResponse(rsp *http.Response) (*DocumentAuditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentAuditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelDocumentAuditResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDocumentInsertResponse parses an HTTP response from a DocumentInsertWithResponse call
func ParseDocumentInsertResponse(rsp *http.Response) (*DocumentInsertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentInsertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelDocumentInsertResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDocumentInsertManyResponse parses an HTTP response from a DocumentInsertManyWithResponse call
func ParseDocumentInsertManyResponse(rsp *http.Response) (*DocumentInsertManyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentInsertManyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelDocumentInsertManyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDocumentProofResponse parses an HTTP response from a DocumentProofWithResponse call
func ParseDocumentProofResponse(rsp *http.Response) (*DocumentProofResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentProofResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelDocumentProofResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDocumentSearchResponse parses an HTTP response from a DocumentSearchWithResponse call
func ParseDocumentSearchResponse(rsp *http.Response) (*DocumentSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelDocumentSearchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDocumentUpdateResponse parses an HTTP response from a DocumentUpdateWithResponse call
func ParseDocumentUpdateResponse(rsp *http.Response) (*DocumentUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DocumentUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelDocumentUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIndexCreateResponse parses an HTTP response from a IndexCreateWithResponse call
func ParseIndexCreateResponse(rsp *http.Response) (*IndexCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IndexCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelIndexCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIndexDeleteResponse parses an HTTP response from a IndexDeleteWithResponse call
func ParseIndexDeleteResponse(rsp *http.Response) (*IndexDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IndexDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelIndexDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RuntimeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
