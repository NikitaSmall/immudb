// Code generated by MockGen. DO NOT EDIT.
// Source: go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	ecdsa "crypto/ecdsa"
	io "io"
	reflect "reflect"
	time "time"

	schema "github.com/codenotary/immudb/pkg/api/schema"
	auth "github.com/codenotary/immudb/pkg/auth"
	state "github.com/codenotary/immudb/pkg/client/state"
	tokenservice "github.com/codenotary/immudb/pkg/client/tokenservice"
	logger "github.com/codenotary/immudb/pkg/logger"
	stream "github.com/codenotary/immudb/pkg/stream"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
)

// MockImmuClient is a mock of ImmuClient interface.
type MockImmuClient struct {
	ctrl     *gomock.Controller
	recorder *MockImmuClientMockRecorder
}

// MockImmuClientMockRecorder is the mock recorder for MockImmu
type MockImmuClientMockRecorder struct {
	mock *MockImmuClient
}

// NewMockImmuClient creates a new mock instance.
func NewMockImmuClient(ctrl *gomock.Controller) *MockImmuClient {
	mock := &MockImmuClient{ctrl: ctrl}
	mock.recorder = &MockImmuClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImmuClient) EXPECT() *MockImmuClientMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockImmuClient) ChangePassword(ctx context.Context, user, oldPass, newPass []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, user, oldPass, newPass)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockImmuClientMockRecorder) ChangePassword(ctx, user, oldPass, newPass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockImmuClient)(nil).ChangePassword), ctx, user, oldPass, newPass)
}

// ChangePermission mocks base method.
func (m *MockImmuClient) ChangePermission(ctx context.Context, action schema.PermissionAction, username, database string, permissions uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePermission", ctx, action, username, database, permissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePermission indicates an expected call of ChangePermission.
func (mr *MockImmuClientMockRecorder) ChangePermission(ctx, action, username, database, permissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePermission", reflect.TypeOf((*MockImmuClient)(nil).ChangePermission), ctx, action, username, database, permissions)
}

// CloseSession mocks base method.
func (m *MockImmuClient) CloseSession(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSession", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSession indicates an expected call of CloseSession.
func (mr *MockImmuClientMockRecorder) CloseSession(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSession", reflect.TypeOf((*MockImmuClient)(nil).CloseSession), ctx)
}

// CompactIndex mocks base method.
func (m *MockImmuClient) CompactIndex(ctx context.Context, req *empty.Empty) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompactIndex", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompactIndex indicates an expected call of CompactIndex.
func (mr *MockImmuClientMockRecorder) CompactIndex(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompactIndex", reflect.TypeOf((*MockImmuClient)(nil).CompactIndex), ctx, req)
}

// Connect mocks base method.
func (m *MockImmuClient) Connect(ctx context.Context) (*grpc.ClientConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx)
	ret0, _ := ret[0].(*grpc.ClientConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockImmuClientMockRecorder) Connect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockImmuClient)(nil).Connect), ctx)
}

// Count mocks base method.
func (m *MockImmuClient) Count(ctx context.Context, prefix []byte) (*schema.EntryCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, prefix)
	ret0, _ := ret[0].(*schema.EntryCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockImmuClientMockRecorder) Count(ctx, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockImmuClient)(nil).Count), ctx, prefix)
}

// CountAll mocks base method.
func (m *MockImmuClient) CountAll(ctx context.Context) (*schema.EntryCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAll", ctx)
	ret0, _ := ret[0].(*schema.EntryCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAll indicates an expected call of CountAll.
func (mr *MockImmuClientMockRecorder) CountAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAll", reflect.TypeOf((*MockImmuClient)(nil).CountAll), ctx)
}

// CreateDatabase mocks base method.
func (m *MockImmuClient) CreateDatabase(ctx context.Context, d *schema.DatabaseSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", ctx, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockImmuClientMockRecorder) CreateDatabase(ctx, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockImmuClient)(nil).CreateDatabase), ctx, d)
}

// CreateDatabaseV2 mocks base method.
func (m *MockImmuClient) CreateDatabaseV2(ctx context.Context, database string, settings *schema.DatabaseNullableSettings) (*schema.CreateDatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabaseV2", ctx, database, settings)
	ret0, _ := ret[0].(*schema.CreateDatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabaseV2 indicates an expected call of CreateDatabaseV2.
func (mr *MockImmuClientMockRecorder) CreateDatabaseV2(ctx, database, settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabaseV2", reflect.TypeOf((*MockImmuClient)(nil).CreateDatabaseV2), ctx, database, settings)
}

// CreateUser mocks base method.
func (m *MockImmuClient) CreateUser(ctx context.Context, user, pass []byte, permission uint32, databasename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user, pass, permission, databasename)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockImmuClientMockRecorder) CreateUser(ctx, user, pass, permission, databasename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockImmuClient)(nil).CreateUser), ctx, user, pass, permission, databasename)
}

// CurrentState mocks base method.
func (m *MockImmuClient) CurrentState(ctx context.Context) (*schema.ImmutableState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentState", ctx)
	ret0, _ := ret[0].(*schema.ImmutableState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentState indicates an expected call of CurrentState.
func (mr *MockImmuClientMockRecorder) CurrentState(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentState", reflect.TypeOf((*MockImmuClient)(nil).CurrentState), ctx)
}

// DatabaseList mocks base method.
func (m *MockImmuClient) DatabaseList(ctx context.Context) (*schema.DatabaseListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseList", ctx)
	ret0, _ := ret[0].(*schema.DatabaseListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatabaseList indicates an expected call of DatabaseList.
func (mr *MockImmuClientMockRecorder) DatabaseList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseList", reflect.TypeOf((*MockImmuClient)(nil).DatabaseList), ctx)
}

// DatabaseListV2 mocks base method.
func (m *MockImmuClient) DatabaseListV2(ctx context.Context) (*schema.DatabaseListResponseV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseListV2", ctx)
	ret0, _ := ret[0].(*schema.DatabaseListResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatabaseListV2 indicates an expected call of DatabaseListV2.
func (mr *MockImmuClientMockRecorder) DatabaseListV2(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseListV2", reflect.TypeOf((*MockImmuClient)(nil).DatabaseListV2), ctx)
}

// Delete mocks base method.
func (m *MockImmuClient) Delete(ctx context.Context, req *schema.DeleteKeysRequest) (*schema.TxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, req)
	ret0, _ := ret[0].(*schema.TxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockImmuClientMockRecorder) Delete(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockImmuClient)(nil).Delete), ctx, req)
}

// DeleteDatabase mocks base method.
func (m *MockImmuClient) DeleteDatabase(ctx context.Context, r *schema.DeleteDatabaseRequest) (*schema.DeleteDatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatabase", ctx, r)
	ret0, _ := ret[0].(*schema.DeleteDatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatabase indicates an expected call of DeleteDatabase.
func (mr *MockImmuClientMockRecorder) DeleteDatabase(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatabase", reflect.TypeOf((*MockImmuClient)(nil).DeleteDatabase), ctx, r)
}

// DescribeTable mocks base method.
func (m *MockImmuClient) DescribeTable(ctx context.Context, tableName string) (*schema.SQLQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTable", ctx, tableName)
	ret0, _ := ret[0].(*schema.SQLQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTable indicates an expected call of DescribeTable.
func (mr *MockImmuClientMockRecorder) DescribeTable(ctx, tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTable", reflect.TypeOf((*MockImmuClient)(nil).DescribeTable), ctx, tableName)
}

// Disconnect mocks base method.
func (m *MockImmuClient) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockImmuClientMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockImmuClient)(nil).Disconnect))
}

// Dump mocks base method.
func (m *MockImmuClient) Dump(ctx context.Context, writer io.WriteSeeker) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump", ctx, writer)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dump indicates an expected call of Dump.
func (mr *MockImmuClientMockRecorder) Dump(ctx, writer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockImmuClient)(nil).Dump), ctx, writer)
}

// ExecAll mocks base method.
func (m *MockImmuClient) ExecAll(ctx context.Context, in *schema.ExecAllRequest) (*schema.TxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecAll", ctx, in)
	ret0, _ := ret[0].(*schema.TxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecAll indicates an expected call of ExecAll.
func (mr *MockImmuClientMockRecorder) ExecAll(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecAll", reflect.TypeOf((*MockImmuClient)(nil).ExecAll), ctx, in)
}

// ExpirableSet mocks base method.
func (m *MockImmuClient) ExpirableSet(ctx context.Context, key, value []byte, expiresAt time.Time) (*schema.TxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpirableSet", ctx, key, value, expiresAt)
	ret0, _ := ret[0].(*schema.TxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpirableSet indicates an expected call of ExpirableSet.
func (mr *MockImmuClientMockRecorder) ExpirableSet(ctx, key, value, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpirableSet", reflect.TypeOf((*MockImmuClient)(nil).ExpirableSet), ctx, key, value, expiresAt)
}

// ExportTx mocks base method.
func (m *MockImmuClient) ExportTx(ctx context.Context, req *schema.ExportTxRequest) (schema.ImmuService_ExportTxClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportTx", ctx, req)
	ret0, _ := ret[0].(schema.ImmuService_ExportTxClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportTx indicates an expected call of ExportTx.
func (mr *MockImmuClientMockRecorder) ExportTx(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportTx", reflect.TypeOf((*MockImmuClient)(nil).ExportTx), ctx, req)
}

// FlushIndex mocks base method.
func (m *MockImmuClient) FlushIndex(ctx context.Context, cleanupPercentage float32, synced bool) (*schema.FlushIndexResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushIndex", ctx, cleanupPercentage, synced)
	ret0, _ := ret[0].(*schema.FlushIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlushIndex indicates an expected call of FlushIndex.
func (mr *MockImmuClientMockRecorder) FlushIndex(ctx, cleanupPercentage, synced interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushIndex", reflect.TypeOf((*MockImmuClient)(nil).FlushIndex), ctx, cleanupPercentage, synced)
}

// Get mocks base method.
func (m *MockImmuClient) Get(ctx context.Context, key []byte, opts ...GetOption) (*schema.Entry, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*schema.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockImmuClientMockRecorder) Get(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockImmuClient)(nil).Get), varargs...)
}

// GetAll mocks base method.
func (m *MockImmuClient) GetAll(ctx context.Context, keys [][]byte) (*schema.Entries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, keys)
	ret0, _ := ret[0].(*schema.Entries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockImmuClientMockRecorder) GetAll(ctx, keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockImmuClient)(nil).GetAll), ctx, keys)
}

// GetAt mocks base method.
func (m *MockImmuClient) GetAt(ctx context.Context, key []byte, tx uint64) (*schema.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAt", ctx, key, tx)
	ret0, _ := ret[0].(*schema.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAt indicates an expected call of GetAt.
func (mr *MockImmuClientMockRecorder) GetAt(ctx, key, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAt", reflect.TypeOf((*MockImmuClient)(nil).GetAt), ctx, key, tx)
}

// GetAtRevision mocks base method.
func (m *MockImmuClient) GetAtRevision(ctx context.Context, key []byte, rev int64) (*schema.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAtRevision", ctx, key, rev)
	ret0, _ := ret[0].(*schema.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAtRevision indicates an expected call of GetAtRevision.
func (mr *MockImmuClientMockRecorder) GetAtRevision(ctx, key, rev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAtRevision", reflect.TypeOf((*MockImmuClient)(nil).GetAtRevision), ctx, key, rev)
}

// GetDatabaseSettings mocks base method.
func (m *MockImmuClient) GetDatabaseSettings(ctx context.Context) (*schema.DatabaseSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseSettings", ctx)
	ret0, _ := ret[0].(*schema.DatabaseSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabaseSettings indicates an expected call of GetDatabaseSettings.
func (mr *MockImmuClientMockRecorder) GetDatabaseSettings(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseSettings", reflect.TypeOf((*MockImmuClient)(nil).GetDatabaseSettings), ctx)
}

// GetDatabaseSettingsV2 mocks base method.
func (m *MockImmuClient) GetDatabaseSettingsV2(ctx context.Context) (*schema.DatabaseSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseSettingsV2", ctx)
	ret0, _ := ret[0].(*schema.DatabaseSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabaseSettingsV2 indicates an expected call of GetDatabaseSettingsV2.
func (mr *MockImmuClientMockRecorder) GetDatabaseSettingsV2(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseSettingsV2", reflect.TypeOf((*MockImmuClient)(nil).GetDatabaseSettingsV2), ctx)
}

// GetOptions mocks base method.
func (m *MockImmuClient) GetOptions() *Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*Options)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockImmuClientMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockImmuClient)(nil).GetOptions))
}

// GetServiceClient mocks base method.
func (m *MockImmuClient) GetServiceClient() schema.ImmuServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceClient")
	ret0, _ := ret[0].(schema.ImmuServiceClient)
	return ret0
}

// GetServiceClient indicates an expected call of GetService
func (mr *MockImmuClientMockRecorder) GetServiceClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceClient", reflect.TypeOf((*MockImmuClient)(nil).GetServiceClient))
}

// GetSince mocks base method.
func (m *MockImmuClient) GetSince(ctx context.Context, key []byte, tx uint64) (*schema.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSince", ctx, key, tx)
	ret0, _ := ret[0].(*schema.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSince indicates an expected call of GetSince.
func (mr *MockImmuClientMockRecorder) GetSince(ctx, key, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSince", reflect.TypeOf((*MockImmuClient)(nil).GetSince), ctx, key, tx)
}

// Health mocks base method.
func (m *MockImmuClient) Health(ctx context.Context) (*schema.DatabaseHealthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", ctx)
	ret0, _ := ret[0].(*schema.DatabaseHealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockImmuClientMockRecorder) Health(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockImmuClient)(nil).Health), ctx)
}

// HealthCheck mocks base method.
func (m *MockImmuClient) HealthCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockImmuClientMockRecorder) HealthCheck(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockImmuClient)(nil).HealthCheck), ctx)
}

// History mocks base method.
func (m *MockImmuClient) History(ctx context.Context, req *schema.HistoryRequest) (*schema.Entries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "History", ctx, req)
	ret0, _ := ret[0].(*schema.Entries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// History indicates an expected call of History.
func (mr *MockImmuClientMockRecorder) History(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockImmuClient)(nil).History), ctx, req)
}

// IsConnected mocks base method.
func (m *MockImmuClient) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected.
func (mr *MockImmuClientMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockImmuClient)(nil).IsConnected))
}

// ListTables mocks base method.
func (m *MockImmuClient) ListTables(ctx context.Context) (*schema.SQLQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTables", ctx)
	ret0, _ := ret[0].(*schema.SQLQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTables indicates an expected call of ListTables.
func (mr *MockImmuClientMockRecorder) ListTables(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTables", reflect.TypeOf((*MockImmuClient)(nil).ListTables), ctx)
}

// ListUsers mocks base method.
func (m *MockImmuClient) ListUsers(ctx context.Context) (*schema.UserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx)
	ret0, _ := ret[0].(*schema.UserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockImmuClientMockRecorder) ListUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockImmuClient)(nil).ListUsers), ctx)
}

// LoadDatabase mocks base method.
func (m *MockImmuClient) LoadDatabase(ctx context.Context, r *schema.LoadDatabaseRequest) (*schema.LoadDatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadDatabase", ctx, r)
	ret0, _ := ret[0].(*schema.LoadDatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadDatabase indicates an expected call of LoadDatabase.
func (mr *MockImmuClientMockRecorder) LoadDatabase(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadDatabase", reflect.TypeOf((*MockImmuClient)(nil).LoadDatabase), ctx, r)
}

// Login mocks base method.
func (m *MockImmuClient) Login(ctx context.Context, user, pass []byte) (*schema.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, user, pass)
	ret0, _ := ret[0].(*schema.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockImmuClientMockRecorder) Login(ctx, user, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockImmuClient)(nil).Login), ctx, user, pass)
}

// Logout mocks base method.
func (m *MockImmuClient) Logout(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockImmuClientMockRecorder) Logout(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockImmuClient)(nil).Logout), ctx)
}

// NewTx mocks base method.
func (m *MockImmuClient) NewTx(ctx context.Context) (Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTx", ctx)
	ret0, _ := ret[0].(Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTx indicates an expected call of NewTx.
func (mr *MockImmuClientMockRecorder) NewTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTx", reflect.TypeOf((*MockImmuClient)(nil).NewTx), ctx)
}

// OpenSession mocks base method.
func (m *MockImmuClient) OpenSession(ctx context.Context, user, pass []byte, database string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSession", ctx, user, pass, database)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenSession indicates an expected call of OpenSession.
func (mr *MockImmuClientMockRecorder) OpenSession(ctx, user, pass, database interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSession", reflect.TypeOf((*MockImmuClient)(nil).OpenSession), ctx, user, pass, database)
}

// ReplicateTx mocks base method.
func (m *MockImmuClient) ReplicateTx(ctx context.Context) (schema.ImmuService_ReplicateTxClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicateTx", ctx)
	ret0, _ := ret[0].(schema.ImmuService_ReplicateTxClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplicateTx indicates an expected call of ReplicateTx.
func (mr *MockImmuClientMockRecorder) ReplicateTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicateTx", reflect.TypeOf((*MockImmuClient)(nil).ReplicateTx), ctx)
}

// SQLExec mocks base method.
func (m *MockImmuClient) SQLExec(ctx context.Context, sql string, params map[string]interface{}) (*schema.SQLExecResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLExec", ctx, sql, params)
	ret0, _ := ret[0].(*schema.SQLExecResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SQLExec indicates an expected call of SQLExec.
func (mr *MockImmuClientMockRecorder) SQLExec(ctx, sql, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLExec", reflect.TypeOf((*MockImmuClient)(nil).SQLExec), ctx, sql, params)
}

// SQLQuery mocks base method.
func (m *MockImmuClient) SQLQuery(ctx context.Context, sql string, params map[string]interface{}, renewSnapshot bool) (*schema.SQLQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLQuery", ctx, sql, params, renewSnapshot)
	ret0, _ := ret[0].(*schema.SQLQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SQLQuery indicates an expected call of SQLQuery.
func (mr *MockImmuClientMockRecorder) SQLQuery(ctx, sql, params, renewSnapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLQuery", reflect.TypeOf((*MockImmuClient)(nil).SQLQuery), ctx, sql, params, renewSnapshot)
}

// Scan mocks base method.
func (m *MockImmuClient) Scan(ctx context.Context, req *schema.ScanRequest) (*schema.Entries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", ctx, req)
	ret0, _ := ret[0].(*schema.Entries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockImmuClientMockRecorder) Scan(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockImmuClient)(nil).Scan), ctx, req)
}

// ServerInfo mocks base method.
func (m *MockImmuClient) ServerInfo(ctx context.Context, req *schema.ServerInfoRequest) (*schema.ServerInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerInfo", ctx, req)
	ret0, _ := ret[0].(*schema.ServerInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerInfo indicates an expected call of ServerInfo.
func (mr *MockImmuClientMockRecorder) ServerInfo(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerInfo", reflect.TypeOf((*MockImmuClient)(nil).ServerInfo), ctx, req)
}

// Set mocks base method.
func (m *MockImmuClient) Set(ctx context.Context, key, value []byte) (*schema.TxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(*schema.TxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockImmuClientMockRecorder) Set(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockImmuClient)(nil).Set), ctx, key, value)
}

// SetActiveUser mocks base method.
func (m *MockImmuClient) SetActiveUser(ctx context.Context, u *schema.SetActiveUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetActiveUser", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetActiveUser indicates an expected call of SetActiveUser.
func (mr *MockImmuClientMockRecorder) SetActiveUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActiveUser", reflect.TypeOf((*MockImmuClient)(nil).SetActiveUser), ctx, u)
}

// SetAll mocks base method.
func (m *MockImmuClient) SetAll(ctx context.Context, kvList *schema.SetRequest) (*schema.TxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAll", ctx, kvList)
	ret0, _ := ret[0].(*schema.TxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAll indicates an expected call of SetAll.
func (mr *MockImmuClientMockRecorder) SetAll(ctx, kvList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAll", reflect.TypeOf((*MockImmuClient)(nil).SetAll), ctx, kvList)
}

// SetReference mocks base method.
func (m *MockImmuClient) SetReference(ctx context.Context, key, referencedKey []byte) (*schema.TxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReference", ctx, key, referencedKey)
	ret0, _ := ret[0].(*schema.TxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetReference indicates an expected call of SetReference.
func (mr *MockImmuClientMockRecorder) SetReference(ctx, key, referencedKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReference", reflect.TypeOf((*MockImmuClient)(nil).SetReference), ctx, key, referencedKey)
}

// SetReferenceAt mocks base method.
func (m *MockImmuClient) SetReferenceAt(ctx context.Context, key, referencedKey []byte, atTx uint64) (*schema.TxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReferenceAt", ctx, key, referencedKey, atTx)
	ret0, _ := ret[0].(*schema.TxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetReferenceAt indicates an expected call of SetReferenceAt.
func (mr *MockImmuClientMockRecorder) SetReferenceAt(ctx, key, referencedKey, atTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReferenceAt", reflect.TypeOf((*MockImmuClient)(nil).SetReferenceAt), ctx, key, referencedKey, atTx)
}

// SetupDialOptions mocks base method.
func (m *MockImmuClient) SetupDialOptions(options *Options) []grpc.DialOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupDialOptions", options)
	ret0, _ := ret[0].([]grpc.DialOption)
	return ret0
}

// SetupDialOptions indicates an expected call of SetupDialOptions.
func (mr *MockImmuClientMockRecorder) SetupDialOptions(options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupDialOptions", reflect.TypeOf((*MockImmuClient)(nil).SetupDialOptions), options)
}

// StreamExecAll mocks base method.
func (m *MockImmuClient) StreamExecAll(ctx context.Context, req *stream.ExecAllRequest) (*schema.TxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamExecAll", ctx, req)
	ret0, _ := ret[0].(*schema.TxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamExecAll indicates an expected call of StreamExecAll.
func (mr *MockImmuClientMockRecorder) StreamExecAll(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamExecAll", reflect.TypeOf((*MockImmuClient)(nil).StreamExecAll), ctx, req)
}

// StreamGet mocks base method.
func (m *MockImmuClient) StreamGet(ctx context.Context, k *schema.KeyRequest) (*schema.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamGet", ctx, k)
	ret0, _ := ret[0].(*schema.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamGet indicates an expected call of StreamGet.
func (mr *MockImmuClientMockRecorder) StreamGet(ctx, k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamGet", reflect.TypeOf((*MockImmuClient)(nil).StreamGet), ctx, k)
}

// StreamHistory mocks base method.
func (m *MockImmuClient) StreamHistory(ctx context.Context, req *schema.HistoryRequest) (*schema.Entries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamHistory", ctx, req)
	ret0, _ := ret[0].(*schema.Entries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamHistory indicates an expected call of StreamHistory.
func (mr *MockImmuClientMockRecorder) StreamHistory(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamHistory", reflect.TypeOf((*MockImmuClient)(nil).StreamHistory), ctx, req)
}

// StreamScan mocks base method.
func (m *MockImmuClient) StreamScan(ctx context.Context, req *schema.ScanRequest) (*schema.Entries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamScan", ctx, req)
	ret0, _ := ret[0].(*schema.Entries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamScan indicates an expected call of StreamScan.
func (mr *MockImmuClientMockRecorder) StreamScan(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamScan", reflect.TypeOf((*MockImmuClient)(nil).StreamScan), ctx, req)
}

// StreamSet mocks base method.
func (m *MockImmuClient) StreamSet(ctx context.Context, kv []*stream.KeyValue) (*schema.TxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamSet", ctx, kv)
	ret0, _ := ret[0].(*schema.TxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamSet indicates an expected call of StreamSet.
func (mr *MockImmuClientMockRecorder) StreamSet(ctx, kv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamSet", reflect.TypeOf((*MockImmuClient)(nil).StreamSet), ctx, kv)
}

// StreamVerifiedGet mocks base method.
func (m *MockImmuClient) StreamVerifiedGet(ctx context.Context, k *schema.VerifiableGetRequest) (*schema.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamVerifiedGet", ctx, k)
	ret0, _ := ret[0].(*schema.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamVerifiedGet indicates an expected call of StreamVerifiedGet.
func (mr *MockImmuClientMockRecorder) StreamVerifiedGet(ctx, k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamVerifiedGet", reflect.TypeOf((*MockImmuClient)(nil).StreamVerifiedGet), ctx, k)
}

// StreamVerifiedSet mocks base method.
func (m *MockImmuClient) StreamVerifiedSet(ctx context.Context, kv []*stream.KeyValue) (*schema.TxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamVerifiedSet", ctx, kv)
	ret0, _ := ret[0].(*schema.TxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamVerifiedSet indicates an expected call of StreamVerifiedSet.
func (mr *MockImmuClientMockRecorder) StreamVerifiedSet(ctx, kv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamVerifiedSet", reflect.TypeOf((*MockImmuClient)(nil).StreamVerifiedSet), ctx, kv)
}

// StreamZScan mocks base method.
func (m *MockImmuClient) StreamZScan(ctx context.Context, req *schema.ZScanRequest) (*schema.ZEntries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamZScan", ctx, req)
	ret0, _ := ret[0].(*schema.ZEntries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamZScan indicates an expected call of StreamZScan.
func (mr *MockImmuClientMockRecorder) StreamZScan(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamZScan", reflect.TypeOf((*MockImmuClient)(nil).StreamZScan), ctx, req)
}

// TxByID mocks base method.
func (m *MockImmuClient) TxByID(ctx context.Context, tx uint64) (*schema.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxByID", ctx, tx)
	ret0, _ := ret[0].(*schema.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxByID indicates an expected call of TxByID.
func (mr *MockImmuClientMockRecorder) TxByID(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxByID", reflect.TypeOf((*MockImmuClient)(nil).TxByID), ctx, tx)
}

// TxByIDWithSpec mocks base method.
func (m *MockImmuClient) TxByIDWithSpec(ctx context.Context, req *schema.TxRequest) (*schema.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxByIDWithSpec", ctx, req)
	ret0, _ := ret[0].(*schema.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxByIDWithSpec indicates an expected call of TxByIDWithSpec.
func (mr *MockImmuClientMockRecorder) TxByIDWithSpec(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxByIDWithSpec", reflect.TypeOf((*MockImmuClient)(nil).TxByIDWithSpec), ctx, req)
}

// TxScan mocks base method.
func (m *MockImmuClient) TxScan(ctx context.Context, req *schema.TxScanRequest) (*schema.TxList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxScan", ctx, req)
	ret0, _ := ret[0].(*schema.TxList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxScan indicates an expected call of TxScan.
func (mr *MockImmuClientMockRecorder) TxScan(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxScan", reflect.TypeOf((*MockImmuClient)(nil).TxScan), ctx, req)
}

// UnloadDatabase mocks base method.
func (m *MockImmuClient) UnloadDatabase(ctx context.Context, r *schema.UnloadDatabaseRequest) (*schema.UnloadDatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnloadDatabase", ctx, r)
	ret0, _ := ret[0].(*schema.UnloadDatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnloadDatabase indicates an expected call of UnloadDatabase.
func (mr *MockImmuClientMockRecorder) UnloadDatabase(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnloadDatabase", reflect.TypeOf((*MockImmuClient)(nil).UnloadDatabase), ctx, r)
}

// UpdateAuthConfig mocks base method.
func (m *MockImmuClient) UpdateAuthConfig(ctx context.Context, kind auth.Kind) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthConfig", ctx, kind)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthConfig indicates an expected call of UpdateAuthConfig.
func (mr *MockImmuClientMockRecorder) UpdateAuthConfig(ctx, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthConfig", reflect.TypeOf((*MockImmuClient)(nil).UpdateAuthConfig), ctx, kind)
}

// UpdateDatabase mocks base method.
func (m *MockImmuClient) UpdateDatabase(ctx context.Context, settings *schema.DatabaseSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatabase", ctx, settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDatabase indicates an expected call of UpdateDatabase.
func (mr *MockImmuClientMockRecorder) UpdateDatabase(ctx, settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatabase", reflect.TypeOf((*MockImmuClient)(nil).UpdateDatabase), ctx, settings)
}

// UpdateDatabaseV2 mocks base method.
func (m *MockImmuClient) UpdateDatabaseV2(ctx context.Context, database string, settings *schema.DatabaseNullableSettings) (*schema.UpdateDatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatabaseV2", ctx, database, settings)
	ret0, _ := ret[0].(*schema.UpdateDatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatabaseV2 indicates an expected call of UpdateDatabaseV2.
func (mr *MockImmuClientMockRecorder) UpdateDatabaseV2(ctx, database, settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatabaseV2", reflect.TypeOf((*MockImmuClient)(nil).UpdateDatabaseV2), ctx, database, settings)
}

// UpdateMTLSConfig mocks base method.
func (m *MockImmuClient) UpdateMTLSConfig(ctx context.Context, enabled bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMTLSConfig", ctx, enabled)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMTLSConfig indicates an expected call of UpdateMTLSConfig.
func (mr *MockImmuClientMockRecorder) UpdateMTLSConfig(ctx, enabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMTLSConfig", reflect.TypeOf((*MockImmuClient)(nil).UpdateMTLSConfig), ctx, enabled)
}

// UseDatabase mocks base method.
func (m *MockImmuClient) UseDatabase(ctx context.Context, d *schema.Database) (*schema.UseDatabaseReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseDatabase", ctx, d)
	ret0, _ := ret[0].(*schema.UseDatabaseReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UseDatabase indicates an expected call of UseDatabase.
func (mr *MockImmuClientMockRecorder) UseDatabase(ctx, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseDatabase", reflect.TypeOf((*MockImmuClient)(nil).UseDatabase), ctx, d)
}

// VerifiedGet mocks base method.
func (m *MockImmuClient) VerifiedGet(ctx context.Context, key []byte, opts ...GetOption) (*schema.Entry, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifiedGet", varargs...)
	ret0, _ := ret[0].(*schema.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifiedGet indicates an expected call of VerifiedGet.
func (mr *MockImmuClientMockRecorder) VerifiedGet(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifiedGet", reflect.TypeOf((*MockImmuClient)(nil).VerifiedGet), varargs...)
}

// VerifiedGetAt mocks base method.
func (m *MockImmuClient) VerifiedGetAt(ctx context.Context, key []byte, tx uint64) (*schema.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifiedGetAt", ctx, key, tx)
	ret0, _ := ret[0].(*schema.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifiedGetAt indicates an expected call of VerifiedGetAt.
func (mr *MockImmuClientMockRecorder) VerifiedGetAt(ctx, key, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifiedGetAt", reflect.TypeOf((*MockImmuClient)(nil).VerifiedGetAt), ctx, key, tx)
}

// VerifiedGetAtRevision mocks base method.
func (m *MockImmuClient) VerifiedGetAtRevision(ctx context.Context, key []byte, rev int64) (*schema.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifiedGetAtRevision", ctx, key, rev)
	ret0, _ := ret[0].(*schema.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifiedGetAtRevision indicates an expected call of VerifiedGetAtRevision.
func (mr *MockImmuClientMockRecorder) VerifiedGetAtRevision(ctx, key, rev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifiedGetAtRevision", reflect.TypeOf((*MockImmuClient)(nil).VerifiedGetAtRevision), ctx, key, rev)
}

// VerifiedGetSince mocks base method.
func (m *MockImmuClient) VerifiedGetSince(ctx context.Context, key []byte, tx uint64) (*schema.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifiedGetSince", ctx, key, tx)
	ret0, _ := ret[0].(*schema.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifiedGetSince indicates an expected call of VerifiedGetSince.
func (mr *MockImmuClientMockRecorder) VerifiedGetSince(ctx, key, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifiedGetSince", reflect.TypeOf((*MockImmuClient)(nil).VerifiedGetSince), ctx, key, tx)
}

// VerifiedSet mocks base method.
func (m *MockImmuClient) VerifiedSet(ctx context.Context, key, value []byte) (*schema.TxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifiedSet", ctx, key, value)
	ret0, _ := ret[0].(*schema.TxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifiedSet indicates an expected call of VerifiedSet.
func (mr *MockImmuClientMockRecorder) VerifiedSet(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifiedSet", reflect.TypeOf((*MockImmuClient)(nil).VerifiedSet), ctx, key, value)
}

// VerifiedSetReference mocks base method.
func (m *MockImmuClient) VerifiedSetReference(ctx context.Context, key, referencedKey []byte) (*schema.TxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifiedSetReference", ctx, key, referencedKey)
	ret0, _ := ret[0].(*schema.TxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifiedSetReference indicates an expected call of VerifiedSetReference.
func (mr *MockImmuClientMockRecorder) VerifiedSetReference(ctx, key, referencedKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifiedSetReference", reflect.TypeOf((*MockImmuClient)(nil).VerifiedSetReference), ctx, key, referencedKey)
}

// VerifiedSetReferenceAt mocks base method.
func (m *MockImmuClient) VerifiedSetReferenceAt(ctx context.Context, key, referencedKey []byte, atTx uint64) (*schema.TxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifiedSetReferenceAt", ctx, key, referencedKey, atTx)
	ret0, _ := ret[0].(*schema.TxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifiedSetReferenceAt indicates an expected call of VerifiedSetReferenceAt.
func (mr *MockImmuClientMockRecorder) VerifiedSetReferenceAt(ctx, key, referencedKey, atTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifiedSetReferenceAt", reflect.TypeOf((*MockImmuClient)(nil).VerifiedSetReferenceAt), ctx, key, referencedKey, atTx)
}

// VerifiedTxByID mocks base method.
func (m *MockImmuClient) VerifiedTxByID(ctx context.Context, tx uint64) (*schema.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifiedTxByID", ctx, tx)
	ret0, _ := ret[0].(*schema.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifiedTxByID indicates an expected call of VerifiedTxByID.
func (mr *MockImmuClientMockRecorder) VerifiedTxByID(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifiedTxByID", reflect.TypeOf((*MockImmuClient)(nil).VerifiedTxByID), ctx, tx)
}

// VerifiedZAdd mocks base method.
func (m *MockImmuClient) VerifiedZAdd(ctx context.Context, set []byte, score float64, key []byte) (*schema.TxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifiedZAdd", ctx, set, score, key)
	ret0, _ := ret[0].(*schema.TxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifiedZAdd indicates an expected call of VerifiedZAdd.
func (mr *MockImmuClientMockRecorder) VerifiedZAdd(ctx, set, score, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifiedZAdd", reflect.TypeOf((*MockImmuClient)(nil).VerifiedZAdd), ctx, set, score, key)
}

// VerifiedZAddAt mocks base method.
func (m *MockImmuClient) VerifiedZAddAt(ctx context.Context, set []byte, score float64, key []byte, atTx uint64) (*schema.TxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifiedZAddAt", ctx, set, score, key, atTx)
	ret0, _ := ret[0].(*schema.TxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifiedZAddAt indicates an expected call of VerifiedZAddAt.
func (mr *MockImmuClientMockRecorder) VerifiedZAddAt(ctx, set, score, key, atTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifiedZAddAt", reflect.TypeOf((*MockImmuClient)(nil).VerifiedZAddAt), ctx, set, score, key, atTx)
}

// VerifyRow mocks base method.
func (m *MockImmuClient) VerifyRow(ctx context.Context, row *schema.Row, table string, pkVals []*schema.SQLValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRow", ctx, row, table, pkVals)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyRow indicates an expected call of VerifyRow.
func (mr *MockImmuClientMockRecorder) VerifyRow(ctx, row, table, pkVals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRow", reflect.TypeOf((*MockImmuClient)(nil).VerifyRow), ctx, row, table, pkVals)
}

// WaitForHealthCheck mocks base method.
func (m *MockImmuClient) WaitForHealthCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForHealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForHealthCheck indicates an expected call of WaitForHealthCheck.
func (mr *MockImmuClientMockRecorder) WaitForHealthCheck(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForHealthCheck", reflect.TypeOf((*MockImmuClient)(nil).WaitForHealthCheck), ctx)
}

// WithClientConn mocks base method.
func (m *MockImmuClient) WithClientConn(clientConn *grpc.ClientConn) *immuClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithClientConn", clientConn)
	ret0, _ := ret[0].(*immuClient)
	return ret0
}

// WithClientConn indicates an expected call of WithClientConn.
func (mr *MockImmuClientMockRecorder) WithClientConn(clientConn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithClientConn", reflect.TypeOf((*MockImmuClient)(nil).WithClientConn), clientConn)
}

// WithLogger mocks base method.
func (m *MockImmuClient) WithLogger(logger logger.Logger) *immuClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLogger", logger)
	ret0, _ := ret[0].(*immuClient)
	return ret0
}

// WithLogger indicates an expected call of WithLogger.
func (mr *MockImmuClientMockRecorder) WithLogger(logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLogger", reflect.TypeOf((*MockImmuClient)(nil).WithLogger), logger)
}

// WithOptions mocks base method.
func (m *MockImmuClient) WithOptions(options *Options) *immuClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOptions", options)
	ret0, _ := ret[0].(*immuClient)
	return ret0
}

// WithOptions indicates an expected call of WithOptions.
func (mr *MockImmuClientMockRecorder) WithOptions(options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOptions", reflect.TypeOf((*MockImmuClient)(nil).WithOptions), options)
}

// WithServerSigningPubKey mocks base method.
func (m *MockImmuClient) WithServerSigningPubKey(serverSigningPubKey *ecdsa.PublicKey) *immuClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithServerSigningPubKey", serverSigningPubKey)
	ret0, _ := ret[0].(*immuClient)
	return ret0
}

// WithServerSigningPubKey indicates an expected call of WithServerSigningPubKey.
func (mr *MockImmuClientMockRecorder) WithServerSigningPubKey(serverSigningPubKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithServerSigningPubKey", reflect.TypeOf((*MockImmuClient)(nil).WithServerSigningPubKey), serverSigningPubKey)
}

// WithServiceClient mocks base method.
func (m *MockImmuClient) WithServiceClient(serviceClient schema.ImmuServiceClient) *immuClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithServiceClient", serviceClient)
	ret0, _ := ret[0].(*immuClient)
	return ret0
}

// WithServiceClient indicates an expected call of WithService
func (mr *MockImmuClientMockRecorder) WithServiceClient(serviceClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithServiceClient", reflect.TypeOf((*MockImmuClient)(nil).WithServiceClient), serviceClient)
}

// WithStateService mocks base method.
func (m *MockImmuClient) WithStateService(rs state.StateService) *immuClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStateService", rs)
	ret0, _ := ret[0].(*immuClient)
	return ret0
}

// WithStateService indicates an expected call of WithStateService.
func (mr *MockImmuClientMockRecorder) WithStateService(rs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStateService", reflect.TypeOf((*MockImmuClient)(nil).WithStateService), rs)
}

// WithStreamServiceFactory mocks base method.
func (m *MockImmuClient) WithStreamServiceFactory(ssf stream.ServiceFactory) *immuClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStreamServiceFactory", ssf)
	ret0, _ := ret[0].(*immuClient)
	return ret0
}

// WithStreamServiceFactory indicates an expected call of WithStreamServiceFactory.
func (mr *MockImmuClientMockRecorder) WithStreamServiceFactory(ssf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStreamServiceFactory", reflect.TypeOf((*MockImmuClient)(nil).WithStreamServiceFactory), ssf)
}

// WithTokenService mocks base method.
func (m *MockImmuClient) WithTokenService(tokenService tokenservice.TokenService) *immuClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTokenService", tokenService)
	ret0, _ := ret[0].(*immuClient)
	return ret0
}

// WithTokenService indicates an expected call of WithTokenService.
func (mr *MockImmuClientMockRecorder) WithTokenService(tokenService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTokenService", reflect.TypeOf((*MockImmuClient)(nil).WithTokenService), tokenService)
}

// ZAdd mocks base method.
func (m *MockImmuClient) ZAdd(ctx context.Context, set []byte, score float64, key []byte) (*schema.TxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAdd", ctx, set, score, key)
	ret0, _ := ret[0].(*schema.TxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAdd indicates an expected call of ZAdd.
func (mr *MockImmuClientMockRecorder) ZAdd(ctx, set, score, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAdd", reflect.TypeOf((*MockImmuClient)(nil).ZAdd), ctx, set, score, key)
}

// ZAddAt mocks base method.
func (m *MockImmuClient) ZAddAt(ctx context.Context, set []byte, score float64, key []byte, atTx uint64) (*schema.TxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAddAt", ctx, set, score, key, atTx)
	ret0, _ := ret[0].(*schema.TxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAddAt indicates an expected call of ZAddAt.
func (mr *MockImmuClientMockRecorder) ZAddAt(ctx, set, score, key, atTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddAt", reflect.TypeOf((*MockImmuClient)(nil).ZAddAt), ctx, set, score, key, atTx)
}

// ZScan mocks base method.
func (m *MockImmuClient) ZScan(ctx context.Context, req *schema.ZScanRequest) (*schema.ZEntries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZScan", ctx, req)
	ret0, _ := ret[0].(*schema.ZEntries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZScan indicates an expected call of ZScan.
func (mr *MockImmuClientMockRecorder) ZScan(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZScan", reflect.TypeOf((*MockImmuClient)(nil).ZScan), ctx, req)
}
